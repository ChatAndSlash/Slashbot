"use strict";

const Text = require("@util/text");

const Item = require("@app/content/items").Item;

/**
 * Equipment parent class.
 */
class Equipment extends Item {
  constructor(info) {
    super(info);

    this.maxHp     = _.get(info, 'maxHp', 0);
    this.force     = _.get(info, 'force', 0);
    this.technique = _.get(info, 'technique', 0);
    this.crit      = _.get(info, 'crit', 0);
    this.defence   = _.get(info, 'defence', 0);
    this.dodge     = _.get(info, 'dodge', 0);
    this.level     = _.get(info, 'level', 1);

    this.properties = _.get(info, 'properties', []);
  }

  /**
   * Get the fields to display when this item is examined.
   *
   * @param {Character} character - The character examining this item.
   *
   * @return {array}
   */
  getExamineFields(character) {
    let fields = super.getExamineFields(character);

    if (this.minDamage) {
      fields.add("Damage", `${this.minDamage}-${this.maxDamage}`, true);
    }

    if (this.force) {
      fields.add( Text.getLongAttributeName('force'), this.force, true);
    }

    if (this.technique) {
      fields.add( Text.getLongAttributeName('technique'), this.technique, true);
    }

    if (this.crit) {
      fields.add( Text.getLongAttributeName('crit'), this.crit, true);
    }

    if (this.defence) {
      fields.add( Text.getLongAttributeName('defence'), this.defence, true);
    }

    if (this.dodge) {
      fields.add( Text.getLongAttributeName('dodge'), this.dodge, true);
    }

    if (this.properties.length) {
      let properties = this.properties.map((property) => Text.getPropertyName(property, character));
      fields.add("Properties", ` ${properties.join(", ")}`, true);
    }

    return fields;
  }

  /**
   * Get the text to display for buying a new item of this type.
   *
   * @param {Character} character - The character looking at buying this item.
   * @param {string} oldItem - The item being replaced.
   * @param {string} newItem - The new item.
   * @param {string} choice - Whether to keep or sell the old item.
   */
  getBuyText(character, oldItem, newItem, choice) {
    const newName = newItem.getDisplayName(character);
    const oldName = oldItem.getDisplayName(character);

    if (choice === 'keep') {
      return `You buy and equip a brand-new ${newName}, tucking your ${oldName} away for later.`;
    }
    else {
      const sellPrice = oldItem.getSellPriceDescription(character);
      return  `You sell your old ${oldName} for ${sellPrice}, and equip a brand-new ${newName} in its place.`;
    }
  }

  /**
   * If the provided character can afford and equip this item.
   *
   * @param {Character} character - The character looking to buy the item.
   * @param {integer} quantity - The quantity of this item to purchase.
   *
   * @return boolean
   */
  canBePurchasedBy(character, quantity = 1) {
    return super.canBePurchasedBy(character, quantity) && character.level >= this.level;
  }

  /**
   * Unequip this item from the specified character.
   *
   * @param {Character} character - The character to unequip the item from.
   */
  unequipFrom(character) { }

  /**
   * Equip this item to the specified character.
   *
   * @param {Character} character - The character to equip the item to.
   */
  equipTo(character) { }

  /**
   * Perform any post-fight success actions and return the messages arising from them.
   *
   * @param {Character} character - The character who won the fight.
   * @param {array} messages - Messages that have already been generated.
   *
   * @return {array}
   */
  doFightSuccess(character, messages) {
    return messages;
  }

  /**
   * Get a description of how this item will change the provided character's stats.
   *
   * @param {Equipment} oldEquipment - The old equipment to compare to this equipment.
   * @param {array} attributes - The attributes to compare on.
   *
   * @return string
   */
  getEquipmentShopDescription(oldEquipment, attributes) {
    if (oldEquipment.type === this.type) {
      return "--Equipped--";
    }

    let differences = [];

    for (let attribute of attributes) {
      if (oldEquipment[attribute] !== this[attribute]) {
        let change = this[attribute] - oldEquipment[attribute];
        let sign = change > 0 ? '+' : '';
        differences.push(`${sign}${change} ${Text.getLongAttributeName(attribute)}`);
      }
    }

    return differences.join(', ');
  }

  /**
   * Do any actions that might happen after each round of combat (regen, etc.)
   *
   * @param {Character} character - The character in combat.
   *
   * @return {array} The messages generated by these actions.
   */
  doPostRoundActions(character) {
    return [];
  }
}

module.exports = {
  Equipment
};
