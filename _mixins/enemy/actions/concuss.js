"use strict";

const PROPERTIES = require('@constants').PROPERTIES;
const FLAGS      = require('@constants').FLAGS;
const Text       = require('@util/text');

const FLAG_CONCUSS_COOLDOWN = 'concuss_cooldown';

/**
 * Disables the character's skills for a number of turns.
 *
 * @param {integer} actionWeight - The chance to perform this attack out of 100.
 * @param {integer} turns - The number of turns to disable the character's skills for.
 * @param {string} text - The text to use to describe the attack.
 *
 * @return {Mixin}
 */
const ConcussAction = (actionWeight, {
  turns = 2,
  cooldown = 3,
  text = "%s strikes you soundly in the head, dealing %s damage and concussing you!%s"
} = {}) => {
  return (Enemy) => class extends Enemy {
    constructor(info) {
      super(info);

      this.fightActionProperties.concuss = [
        PROPERTIES.IS_ATTACK,
      ];
    }

    /**
     * Get the fight actions for this enemy.
     *
     * @param {Character} character - The character this enemy is fighting.
     * @param {object} actions - Actions passed in from mixed-in actions.
     *
     * @return {object}
     */
    getFightActions(character, actions = {}) {
      if ( ! this.hasFlag(FLAG_CONCUSS_COOLDOWN)) {
        actions.concuss = actionWeight;
      }

      return super.getFightActions(character, actions);
    }

    /**
     * Perform the extra-powerful attack.
     *
     * @param {Character} character - The character being attacked.
     *
     * @return {array}
     */
    concuss(character) {
      return this.attackHelper(character, (attackInfo) => {
        character.decreaseHp(attackInfo.damage);
        character.setFlag(FLAGS.CONCUSSED_TURNS, turns + 1);
        this.setFlag(FLAG_CONCUSS_COOLDOWN, cooldown);

        return [__(
          text,
          this.getDisplayName(character),
          attackInfo.damage > 0 ? `*${attackInfo.damage}*` : __('no'),
          attackInfo.didCrit && attackInfo.damage > 0 ? __(' _Critical hit!_') : ''
        )];
      });
    }

    /**
     * Perform any actions that happen after the round (decrement/clear all timers, etc)
     *
     * @param {Combatant} opponent - The current combatant's opponent.
     *
     * @return {array} Messages generated by these actions.
     */
    doPostRoundActions(opponent) {
      let messages = super.doPostRoundActions(opponent);

      if (opponent.hasFlag(FLAGS.CONCUSSED_TURNS)) {
        const turns = opponent.getFlag(FLAGS.CONCUSSED_TURNS);
        const turnsText = Text.pluralize("turn", turns);
        messages.push(__(":dizzy_face: You are concussed and cannot use any skills for %d %s.", turns, turnsText));
      }

      if (this.hasFlag(FLAG_CONCUSS_COOLDOWN)) {
        this.decrementFlag(FLAG_CONCUSS_COOLDOWN);
      }

      return messages;
    }
  };
};

module.exports = {
  ConcussAction
};