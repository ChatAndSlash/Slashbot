"use strict";

const FLAGS      = require('@constants').FLAGS;
const PROPERTIES = require('@constants').PROPERTIES;

const FLAG_ACID_SPLASH_COOLDOWN = 'acid_splash_cooldown';

/**
 * Splash some acid on the character, blinding and doing a DoT.
 *
 * @param {integer} actionWeight - The chance to perform this attack out of 100.
 * @param {integer} strength - The strength of the acid out of 100 (% of attack damage).
 * @param {integer} duration - The duration of the acid.
 * @param {string} text - The combat text to display on a successful acid splash.
 *
 * @return {Mixin}
 */
const AcidSplashAction = (actionWeight, {
  strength = 20,
  duration = 3,
  cooldown = 4,
  text = ":sparkle: %s splashes you with acid!  It burns!  You can't see!  This is terrible!"
} = {}) => {
  return (Enemy) => class extends Enemy {
    constructor(info) {
      super(info);

      this.fightActionProperties.acidSplashAttack = [
        PROPERTIES.IS_ATTACK,
      ];
    }

    /**
     * Get the fight actions for this enemy.
     *
     * @param {Character} character - The character this enemy is fighting.
     * @param {object} actions - Actions passed in from mixed-in actions.
     *
     * @return {object}
     */
    getFightActions(character, actions = {}) {
      if ( ! this.hasFlag(FLAG_ACID_SPLASH_COOLDOWN)) {
        actions.acidSplashAttack = actionWeight;
      }

      return super.getFightActions(character, actions);
    }

    /**
     * Splash some acid!
     *
     * @param {Character} character - The character being attacked.
     *
     * @return {array}
     */
    acidSplashAttack(character) {
      character.setFlag(FLAGS.ACID_TURNS, duration + 1);
      character.setFlag(FLAGS.ACID_DAMAGE, this.getAcidDamage(character));
      this.setFlag(FLAG_ACID_SPLASH_COOLDOWN, cooldown);

      return [__(text, this.getDisplayName(character))];
    }

    /**
     * Perform any actions that happen after the round (decrement/clear all timers, etc)
     *
     * @param {Combatant} opponent - The current combatant's opponent.
     *
     * @return {array} Messages generated by these actions.
     */
    doPostRoundActions(opponent) {
      let messages = super.doPostRoundActions(opponent);

      if (opponent.hasFlag(FLAGS.ACID_TURNS)) {
        const damage = opponent.getFlag(FLAGS.ACID_DAMAGE);
        opponent.decreaseHp(damage);
        const remainingTurns = opponent.getFlag(FLAGS.ACID_TURNS) - 1;
        const remainingText = remainingTurns > 0 ? __(" (%d turns remaining)", remainingTurns) : "";
        messages.push(__("Acid burns you for %d damage%s.", damage, remainingText));
      }

      if (this.hasFlag(FLAG_ACID_SPLASH_COOLDOWN)) {
        this.decrementFlag(FLAG_ACID_SPLASH_COOLDOWN);
      }

      return messages;
    }

    /**
     * Get the amount of damage this enemy's acid attack does.
     * Note: Acid cannot crit.
     *
     * @param {Combatant} opponent - The opponent being attacked.
     *
     * @return {integer}
     */
    getAcidDamage(opponent) {
      // Acid cannot crit!
      const attackInfo = this.getEffectAttackInfo(opponent);

      return Math.max(1, Math.ceil(attackInfo.damage / 100 * strength));
    }

    /**
     * Special actions to take when the fight with this enemy is complete, regardless of win/loss.
     *
     * NOTE: Any additionally enqueued messages NEED a delay in order to ensure they show up after
     * the action fight message.
     *
     * @param {Character} character - The character who was in the fight.
     * @param {array} messages - The messages already generated in this fight.
     *
     * @return {array}
     */
    doFightEnd(character, messages) {
      character.clearFlag(FLAGS.ACID_DAMAGE);

      return super.doFightEnd(character, messages);
    }
  };
};

module.exports = {
  AcidSplashAction
};