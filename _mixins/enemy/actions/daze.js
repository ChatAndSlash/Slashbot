"use strict";

const { pluralize } = require('@util/text');
const { sprintf }   = require("sprintf-js");

const FLAGS      = require('@constants').FLAGS;
const PROPERTIES = require('@constants').PROPERTIES;

const FLAG_DAZE_COOLDOWN = 'daze_cooldown';

/**
 * Daze character, dropping their defence by 25% and making them unable to Defend for X turns.
 *
 * @param {integer} actionWeight - The chance to perform this attack out of 100.
 * @param {integer} duration - The number of turns the character is dazed for.
 *
 * @return {Mixin}
 */
const DazeAction = (actionWeight, {
  duration = 5,
  cooldown = 6,
  dodgeText = ":dash: %s attacks, but you dodge!",
  missText = "%s attacks, but misses!",
  attackText = ":dizzy_face: %s attacks and hits you squarely in the head, dealing %s damage %s dazing you for %d turns.%s"
} = {}) => {
  return (Enemy) => class extends Enemy {
    constructor(info) {
      super(info);

      this.fightActionProperties.daze = [
        PROPERTIES.IS_ATTACK,
      ];
    }

    /**
     * Get the fight actions for this enemy.
     *
     * @param {Character} character - The character this enemy is fighting.
     * @param {object} actions - Actions passed in from mixed-in actions.
     *
     * @return {object}
     */
    getFightActions(character, actions = {}) {
      if ( ! this.hasFlag(FLAG_DAZE_COOLDOWN)) {
        actions.daze = actionWeight;
      }

      return super.getFightActions(character, actions);
    }

    /**
     * Daze your opponent.
     *
     * @param {Character} character - The character being attacked.
     *
     * @return {array}
     */
    daze(character) {
      return this.attackHelper(character, (attackInfo) => {
        character.setFlag(FLAGS.DAZED_TURNS, duration + 1);

        const critText   = attackInfo.didCrit && attackInfo.damage > 0 ? " _Critical hit!_" : "";
        const damageText = attackInfo.damage > 0 ? `*${attackInfo.damage}*` : "no";
        const joinText = attackInfo.damage > 0 ? "and" : "but";
        character.decreaseHp(attackInfo.damage);
        this.setFlag(FLAG_DAZE_COOLDOWN, cooldown);

        return [sprintf(attackText, this.getDisplayName(character), damageText, joinText, duration, critText)];
      }, dodgeText, missText);
    }

    /**
     * Perform any actions that happen after the round (decrement/clear all timers, etc)
     *
     * @param {Character} character - The character facing this enemy.
     *
     * @return {array} Messages generated by these actions.
     */
    doPostRoundActions(character) {
      let messages = super.doPostRoundActions(character);

      // Character is dazed?
      if (character.hasFlag(FLAGS.DAZED_TURNS)) {
        const turns = character.getFlag(FLAGS.DAZED_TURNS) - 1;
        const turnText = (turns > 0) ? ` for ${turns} more ${pluralize("turn", turns)} turns` : "";
        messages.push(`:dizzy_face: You stumble a bit, dazed from your ${this.getDisplayName(character)}'s attack${turnText}.  Your defence is 25% lower, and you cannot defend!`);
      }

      if (this.hasFlag(FLAG_DAZE_COOLDOWN)) {
        this.decrementFlag(FLAG_DAZE_COOLDOWN);
      }

      return messages;
    }
  };
};

module.exports = {
  DazeAction
};