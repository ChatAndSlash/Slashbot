"use strict";

const mix               = require('mixwith').mix;
const ScatterslideEnemy = require('@app/content/enemies/scatterslide').ScatterslideEnemy;
const Random            = require('@util/random');
const FuriousAction     = require('@mixins/enemy/actions/furious').FuriousAction;
const DropsQuicksalt    = require('@mixins/enemy/loot/quicksalt').DropsQuicksalt;

const FLAGS = require('@constants').FLAGS;

const TURNS_RUMBLING = 3;

class BrownDragon extends mix(ScatterslideEnemy).with(
  FuriousAction(20),
  DropsQuicksalt(100, 10, 12)
) {
  constructor() {
    super({
      type: 'scatterslide-brown_dragon',
      displayName: 'Brown Dragon',
      levelBonus: 4,
      isBoss: true,
      scales: 3,
      stats: {
        base: {
          maxHp: 75,
          force: 7,
          defence: 10,
          goldMin: 50,
          goldMax: 50
        },
        perLevel: {
          maxHp: 35,
          force: 1,
          defence: 2,
          goldMin: 20,
          goldMax: 25
        }
      },
      fightActions: {
        burrow: 10,
        rumble: 20,
        rockeater: 10,
      }
    });
  }

  /**
   * Gets the description for this enemy.
   *
   * @param {Character} character - The character viewing the enemy.
   *
   * @return {string}
   */
  getDescription(character) {
    let description = "Exploding up from the earth beneath you, the *Brown Dragon* is a terrifying collection of scales, fangs, and claws.  Its wingspan is severely reduced, though you surmise it uses this particular configuration to help burrow through the earth at speed.  ";

    if (this.hp / this.maxHp > 0.5) {
      description += "You know the beast is a simple, if terrifying, animal, but you could almost swear it was laughing at you.";
    }
    else if (this.hp / this.maxHp > 0.25) {
      description += "It almost seems to have a worried look to it.";
    }
    else {
      description += "It looks desperate.  Well, you think it looks desperate, but you must be imagining it.";
    }

    return description;
  }

  /**
   * Choose the fight action for this enemy.
   *
   * @param {Character} character - The character this enemy is fighting.
   *
   * @return {string}
   */
  chooseFightAction(character) {
    if (this.hasFlag(FLAGS.IS_BURROWED)) {
      return 'beBurrowed';
    }

    return super.chooseFightAction(character);
  }

  /**
   * Perform any actions that happen after the round (decrement/clear all timers, etc)
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    if (this.hasFlag(FLAGS.RUMBLING_TURNS)) {
      const chance = Random.between(1, 100);

      // 25% chance of character being stunned
      if (chance <= 25) {
        opponent.setFlag(FLAGS.STUNNED_TURNS, 1);
        messages.push(":confounded: Rocks fall and strike you squarely, stunning you for a turn.");
      }
      // 50% chance of character taking damage
      else if (chance <= 75) {
        this.setFlag(FLAGS.CANNOT_CRIT);
        const attackInfo = this.getAttackInfo(opponent);
        this.clearFlag(FLAGS.CANNOT_CRIT);

        if (attackInfo.didMiss || attackInfo.didDodge) {
          messages.push(":dash: Rocks fall all around you, but you manage to dodge out of the way!");
        }
        else {
          const damage = Math.ceil(attackInfo.damage / 2);
          opponent.decreaseHp(damage);
          messages.push(`:persevere: Rocks fall and strike you a glancing blow, dealing *${damage}* damage.`);
        }
      }
      // 25% chance of nothing happening
      else {
        messages.push("The cavern shakes and rumbles around you.");
      }
    }

    return messages;
  }

  /**
   * Special actions to take when this enemy has been beaten.
   *
   * NOTE: Any additionally enqueued messages NEED a delay in order to ensure they show up after
   * the action fight message.
   *
   * @param {Character} character - The character who won the fight.
   * @param {array} messages - Any messages that have happened so far in combat.
   *
   * @return {array}
   */
  doFightSuccess(character, messages) {
    // Gotta define this in here to avoid circular content file references
    const Locations = require('@app/content/locations').Locations;

    character.clearFlag(FLAGS.BROWN_DRAGON_TRACKING);
    character.clearFlag(FLAGS.UNDERDRIFT_DOOR_UNLOCKED);
    character.clearFlag(FLAGS.MINE_ELEVATOR_FIXED);
    character.clearFlag(FLAGS.QUARRY_BLOWN_UP);

    character.setFlag(FLAGS.IN_CUTSCENE);

    character.location = Locations.new('stagecoach');

    character.track('Brown Dragon Killed');

    character.slashbot.tellStory(messages.concat([
      "You lay the *Brown Dragon* low with a vicious, two-handed strike. It sinks to the ground, defeated, as the mine around you shakes in seeming sympathy.",
      "With a small effort of will, you evoke Phaera's flame. It blazes outward from you, consuming the *Brown Dragon* as it tries in vain to stand and fight some more.",
      "You manage to grab a handful of Quicksalt and some of the *Dragon's* treasure piled nearby before falling rocks begin to seriously endanger you, and you scramble away to safety.  Rocks fall, and the Fault Zone is blocked off forever.",
      "You return to the elevator and are just pulling the safety bar into position, when you hear a scraping noise down the tunnel in front of you. You peer into the distance, attempting to discern anything in the flickering shadows.",
      "Suddenly and with tremendous speed, a huge black dragon is upon you! It fills the entire shaft, but despite its immense size, it stands before you before you can react. You go you slam on the lift button, but it raises a placating claw at you.",
      { npc: 'obsidia', text: "\"Hold, adventurer. You and I have much to discuss.\"" },
      "*Obsidia* looks you up and down, then snorts in laughter.",
      { npc: 'obsidia', text: "\"I can see that great pompous bird has recruited yet another in her ridiculous fight. The feathers are practically falling off of you.\"" },
      { npc: 'obsidia', text: "\"No matter, you do my work for me as surely as you do hers.\"" },
      { npc: 'obsidia', text: "\"You see, for some reason, my brood has ceased to obey me. They rampage around following their own greed, regardless of how it affects the world around them and causing death and destruction as they please.\"" },
      { npc: 'obsidia', text: "\"I had in fact just come here to deal with _Lutuscha_ myself, only to find that someone had already solved my little problem.\"" },
      { npc: 'obsidia', text: "\"I want to thank you for that, and provide you a small reward. I know you'd never accept anything from me, so instead I offer you information.\"" },
      { npc: 'obsidia', text: "\"In fact, information you know you can trust, as it benefits both of us. I would like to tell you where to find your next target.\"" },
      { npc: 'obsidia', text: "\"In the city of Watermoon, you will find a *Golden Dragon* has taken residence. Her name is _Aureth_, and she has become a person of great prominence.\"" },
      { npc: 'obsidia', text: "\"Still, she defies me, and she threatens your precious patron. Do us both a favour and kill her.\"" },
      "*Obsidia's* voice is sharp with menace, yet harsh with pain. She stares at you for a moment, then begins to retreat down the tunnel.",
      { npc: 'obsidia', text: "\"Do me this favour, and I will spare you a while longer. As for me, I will seek out the more remote members of my brood and teach them a dire lesson.\"" },
      { npc: 'obsidia', text: "\"Do not look for me. I will come to you when I am ready. Pray you have accomplished my task in that time, and I will continue to be so lenient.\"" },
      "Again, with unnerving speed, *Obsidia* rushes down the tunnel away from you. You hit the lift button, and urge the elevator to move faster.",
      "Despite how uneasy you feel, you return to a hero's welcome. The miners all immediately begin making plans to pacify the quarry and mine, and plot out the safe passages in the depths, and re-open the mine.",
      "You offer your help, and before long the mine is producing again, though the surrounding areas are yet to be fully pacified, and are still dangerous.",
      { text: "Traffic begins to arrive at the mine to exchange goods, and the stagecoach service is able to expand its area. After a brief chat with the driver, he agrees to take you to Watermoon when you are prepared to go." }
    ]), character);

    return [];
  }

  /**
   * Do a single enemy attack.
   *
   * @param {Character} character - The character being attacked.
   *
   * @return {array}
   */
  doAttack(character) {
    let messages = [];

    // Enemy attacks character
    const attackInfo = this.getAttackInfo(character);

    // Dodged?  No damage!
    if (attackInfo.didDodge) {
      if (this.hasFlag(FLAGS.IS_BURROWED)) {
        messages.push(`:dash: ${this.getDisplayName(character)} bursts out of the ground at you, claws swiping and teeth snapping, you but you dodge!`);
      }
      else {
        messages.push(`:dash: ${this.getDisplayName(character)} attacks, but you dodge!`);
      }
    }

    // Missed?  No damage!
    else if (attackInfo.didMiss) {
      if (this.hasFlag(FLAGS.IS_BURROWED)) {
        messages.push(`${this.getDisplayName(character)} bursts out of the ground at you, claws swiping and teeth snapping, you but misses!`);
      }
      else {
        messages.push(`${this.getDisplayName(character)} attacks, but misses!`);
      }
    }

    // Otherwise, character got hurt
    else {
      const critText = attackInfo.didCrit ? " _Critical hit!_" : "";

      if (this.hasFlag(FLAGS.IS_BURROWED)) {
        attackInfo.damage = Math.ceil(attackInfo.damage * 2.5);
        const attackText = attackInfo.damage > 0 ? `*${attackInfo.damage}*` : "no";
        messages.push(`:scream: ${this.getDisplayName(character)} bursts out of the ground at you, claws swiping and teeth snapping, and deals ${attackText} damage to you.${critText}`);
      }
      else {
        const attackText = attackInfo.damage > 0 ? `*${attackInfo.damage}*` : "no";
        messages.push(`:frowning: ${this.getDisplayName(character)} attacks, dealing ${attackText} damage to you.${critText}`);
      }

      character.decreaseHp(attackInfo.damage);
    }

    return messages;
  }

  /**
   * Burrow into the ground for 1-2 turns.
   *
   * @param {Character} character - The character being attacked.
   *
   * @return {messages}
   */
  burrow(character) {
    this.setFlag(FLAGS.IS_BURROWED, 1);
    this.setFlag(FLAGS.IS_INVISIBLE);

    return ["The Brown Dragon burrows deep within the earth.  You cannot tell exactly where she is, but tremors shake the ground underfoot all around."];
  }

  /**
   * On first turn burrowed, 50% chance to stay burrowed, 50% chance to pop up and do 250% damage.
   * On second turn burrowed, 100% pop up and do 250% damage.
   *
   * @param {Character} character - The character being attacked.
   *
   * @return {messages}
   */
  beBurrowed(character) {
    const burrowedTurns = this.getFlag(FLAGS.IS_BURROWED);
    if (1 === burrowedTurns && 1 === Random.between(1, 2)) {
      this.setFlag(FLAGS.IS_BURROWED, 2);
      return ["The ground underneath you shakes gently all around.  The Brown Dragon is down there... somewhere."];
    }
    else {
      const messages = this.doAttack(character);
      this.clearFlag(FLAGS.IS_BURROWED);
      this.clearFlag(FLAGS.IS_INVISIBLE);
      return messages;
    }
  }

  /**
   * Cause the cavern to rumble and shake for 4 turns, with a 25% chance to take damage and 50%
   * chance to take damage.
   *
   * @param {Character} character - The character being rumbled.
   *
   * @return {messages}
   */
  rumble(character) {
    this.setFlag(FLAGS.RUMBLING_TURNS, TURNS_RUMBLING + 1);
    return ["The Brown Dragon slams the cavern wall with its tail, causing the cavern to shake and rumble."];
  }

  /**
   * Chow down on some stones!  Get 10% health back.
   *
   * @param {Character} character - The character that has to deal with this.
   *
   * @return {messages}
   */
  rockeater(character) {
    const hp = this.increaseHp(Math.ceil(this.maxHp / 10));
    return [`:sparkles: The Brown Dragon claws the earth beneath her, digging up a couple of choice rocks that she wolfs down, healing ${hp} HP.`];
  }
}

module.exports = BrownDragon;