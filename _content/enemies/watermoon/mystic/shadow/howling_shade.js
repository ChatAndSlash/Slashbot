"use strict";

const mix                 = require('mixwith').mix;
const WatermoonEnemy      = require('@app/content/enemies/watermoon').WatermoonEnemy;
const WatermoonReputation = require('@mixins/enemy/reputation/watermoon').WatermoonReputation;
const FuriousAction       = require('@mixins/enemy/actions/furious').FuriousAction;
const DropsMoondrop       = require('@mixins/enemy/loot/moondrop').DropsMoondrop;

const FLAG_HOWLING_TURNS = 'howling_turns';
const HOWL_TURN_DAMAGE = 0.05;

class HowlingShadeEnemy extends mix(WatermoonEnemy).with(
  FuriousAction(20),
  DropsMoondrop(5),
  WatermoonReputation(1)
) {
  constructor() {
    super({
      type: 'watermoon-mystic-shadow-howling_shade',
      displayName: 'Howling Shade',
      description: "A smoky shade jumps out at you from the shadows, howling inhumanly.  Worse, as you fight, it never stops for breath or changes in intensity.",
    });
  }

  /**
   * Howl for progressively more damage per turn.
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    const howlingTurns = this.getFlag(FLAG_HOWLING_TURNS, 0) + 1;
    this.setFlag(FLAG_HOWLING_TURNS, howlingTurns);

    const attackInfo = this.getEffectAttackInfo(opponent);
    const damage = Math.ceil(attackInfo.damage * HOWL_TURN_DAMAGE * howlingTurns);
    opponent.decreaseHp(damage);
    messages.push(__(":scream: The Shade's howl reverberates inside your head, dealing *%d* damage.", damage));

    return messages;
  }

  /**
   * Clear howling flag so next shade isn't deadly.
   *
   * @param {Character} character - The character who was in the fight.
   * @param {array} messages - The messages already generated in this fight.
   *
   * @return {array}
   */
  doFightEnd(character, messages) {
    this.clearFlag(FLAG_HOWLING_TURNS);

    return super.doFightEnd(character, messages);
  }

}

module.exports = HowlingShadeEnemy;