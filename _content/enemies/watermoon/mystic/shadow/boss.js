"use strict";

const mix                 = require('mixwith').mix;
const WatermoonEnemy      = require('@app/content/enemies/watermoon').WatermoonEnemy;
const WatermoonReputation = require('@mixins/enemy/reputation/watermoon').WatermoonReputation;
const FuriousAction       = require('@mixins/enemy/actions/furious').FuriousAction;
const BlindAction         = require('@mixins/enemy/actions/blind').BlindAction;
const DropsMoondrop       = require('@mixins/enemy/loot/moondrop').DropsMoondrop;
const Random              = require('@util/random');
const Text                = require('@util/text');
const Loot                = require('@app/loot').Loot;
const LootSlot            = require('@app/loot').LootSlot;

const FLAGS = require('@constants').FLAGS;

const FLAG_SHADOWFORM_TURNS = 'shadowform_turns';

class ShadowBossEnemy extends mix(WatermoonEnemy).with(
  FuriousAction(30),
  BlindAction(10),
  DropsMoondrop(100, 5),
  WatermoonReputation(50)
) {
  constructor() {
    super({
      type: 'watermoon-mystic-shadow-boss',
      displayName: 'Blackpool Prime',
      description: "Eight feet tall, barrel-chested, and clad in armour of the blackest night, the Blackpool Prime stands as the pinnacle of Shadow power.",
      isBoss: true,
      stats: {
        base: {
          maxHp: 75,
          force: 7,
          goldMin: 50,
          goldMax: 50
        },
        perLevel: {
          maxHp: 35,
          force: 1,
          goldMin: 20,
          goldMax: 25
        }
      },
      fightActions: {
        shadowform: 10,
      },
      loot: new Loot(
        new LootSlot().addEntry(100, 'quest-watermoon-shadow_soul_gem')
      )
    });
  }

  /**
   * Change into Shadowform, reducing damage by 50% and all incoming damage to 0 for 1-3 turns.
   *
   * @param {Character} character - The opposing character.
   *
   * @return {array} Messages describing the attack.
   */
  shadowform(character) {
    let messages = [];

    const turns = Random.getWeighted([
      { 'weight': 60, value: 1 },
      { 'weight': 30, value: 2 },
      { 'weight': 10, value: 3 },
    ]);

    this.setFlag(FLAG_SHADOWFORM_TURNS, turns + 1);

    messages.push(__("A pool of shadows rise up from underneath %s, coating it in all-concealing blackness.", this.getDisplayName(character)));

    return messages;
  }

  /**
   * Perform any actions that happen after the round (decrement/clear all timers, etc)
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    this.decrementFlag(FLAG_SHADOWFORM_TURNS);

    if (this.hasFlag(FLAG_SHADOWFORM_TURNS)) {
      const turns = this.getFlag(FLAG_SHADOWFORM_TURNS);
      messages.push(__(":new_moon: %s has taken Shadow form, and cannot be hurt for %d more %s!", this.getDisplayName(opponent), turns, Text.pluralize("turn", turns)));
    }

    return messages;
  }

  /**
   * After an attack has been performed, allow the attacker to modify the attack info.
   *
   * @param {object} attackInfo - The attack information.
   * @param {Combatant} defender - The defending combatant.
   *
   * @return {object}
   */
  doAttackerPostAttackProcessing(attackInfo, defender) {
    // Boss does 50% damage when in shadowform
    if (this.hasFlag(FLAG_SHADOWFORM_TURNS)) {
      attackInfo.damage = Math.ceil(attackInfo.damage / 2);
    }

    return super.doAttackerPostAttackProcessing(attackInfo, defender);
  }

  /**
   * After an attack has been performed, allow the defender to modify the attack info.
   *
   * @param {object} attackInfo - The attack information.
   * @param {Combatant} attacker - The attacking combatant.
   *
   * @return {object}
   */
  doDefenderPostAttackProcessing(attackInfo, attacker) {
    // Boss takes 0 damage when in shadowform
    if (this.hasFlag(FLAG_SHADOWFORM_TURNS)) {
      attackInfo.damage = 0;
    }

    return super.doDefenderPostAttackProcessing(attackInfo, attacker);
  }

  /**
   * Character has beat the mini-boss.
   *
   * @param {Character} character - The character who won the fight.
   * @param {array} messages - Any messages that have happened so far in combat.
   *
   * @return {array}
   */
  doFightSuccess(character, messages) {
    // Define in here to prevent circular references
    const Locations = require('@app/content/locations').Locations;

    const steps = character.getFlag('steps_shadow');
    character.clearFlag('steps_shadow');
    character.track('Blackpool Prime Defeated', { steps });

    character.setFlag(FLAGS.SHADOW_BOSS_DEFEATED);
    character.location = Locations.new("watermoon-mystic-observatory");
    messages.push(__("With the Blackpool Prime defeated, the Shadow Plane fades around you and the Shadow Portal spirals closed."));

    return messages;
  }
}

module.exports = ShadowBossEnemy;