"use strict";

const mix            = require('mixwith').mix;
const WatermoonEnemy = require('@app/content/enemies/watermoon').WatermoonEnemy;
const FuriousAction  = require('@mixins/enemy/actions/furious').FuriousAction;

const PROPERTIES = require('@constants').PROPERTIES;

const FLAG_BOSS_STATS = 'boss_stats';

class ZombieProtectorsEnemy extends mix(WatermoonEnemy).with(
  FuriousAction(20)
) {
  constructor() {
    super({
      type: 'watermoon-mystic-death-zombie_protectors',
      displayName: 'Zombie Protectors',
      isAre: 'are',
      description: "These zobmies swarm around the Grand Lich, preventing any of your attacks from reaching it.  Though numerous, they are not immortal.  Defeat them to continue your fight!",
      properties: [
        PROPERTIES.IS_GROUP,
      ]
    });
  }

  /**
   * Zombies should only have 50% of the levels of the boss.
   *
   * @return integer
   */
  getLevelBonus() {
    return Math.ceil(this.level * 0.5) * -1;
  }

  /**
   * Idenfity if this character is dead (typically if HP <= 0).
   *
   * WHAT IS DEAD MAY NEVER DIE.
   *
   * @return boolean
   */
  isDead() {
    return false;
  }

  /**
   * Choose the fight action for this enemy.
   *
   * @param {Character} character - The character this enemy is fighting.
   *
   * @return {string}
   */
  chooseFightAction(character) {
    if (this.hp <= 0) {
      return 'doNothing';
    }

    return super.chooseFightAction(character);
  }

  /**
   * Don't do anything!
   *
   * @param {Character} character - The character being opposed.
   *
   * @return {array} Messages generated by these actions.
   */
  doNothing(character) {
    return [];
  }

  /**
   * Perform any actions that happen after the round (decrement/clear all timers, etc)
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    if (this.hp <= 0) {
      messages.push(this.replaceWithBoss(opponent));
    }

    return messages;
  }

  /**
   * Replace this enemy with the old boss enemy.
   *
   * @param {Character} character - The character who won the fight.
   *
   * @return string
   */
  replaceWithBoss(character) {
    const Enemies = require('@app/content/enemies').Enemies;
    const bossStats = this.getFlag(FLAG_BOSS_STATS);
    let boss = Enemies.new('watermoon-mystic-death-boss');
    boss.setLevel(this.level);
    boss.hp     = bossStats.hp;
    boss._flags = bossStats.flags;

    character.enemy = boss;
    return __("With the last zombie defeated, the Grand Lich is forced to engage with you again.");
  }
}

module.exports = ZombieProtectorsEnemy;