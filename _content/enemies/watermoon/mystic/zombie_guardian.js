"use strict";

const mix                 = require('mixwith').mix;
const WatermoonEnemy      = require('@app/content/enemies/watermoon').WatermoonEnemy;
const WatermoonReputation = require('@mixins/enemy/reputation/watermoon').WatermoonReputation;
const FuriousAction       = require('@mixins/enemy/actions/furious').FuriousAction;
const ChillAction         = require('@mixins/enemy/actions/chill').ChillAction;
const CrippleAction       = require('@mixins/enemy/actions/cripple').CrippleAction;
const DropsMoondrop       = require('@mixins/enemy/loot/moondrop').DropsMoondrop;

const FLAG_FIGHT_TURNS = 'fight_turns';

const CastIcicleAction = ChillAction(20, {
  dodgeText: ":dash: %s casts Icicle at you but you dodge!",
  missText: "%s casts Icicle at you but misses!",
  attackText: ":snowflake: %s casts Icicle at you, dealing %s damage and chilling you.%s"
});

class ZobmieGuardianEnemy extends mix(WatermoonEnemy).with(
  FuriousAction(30),
  CastIcicleAction,
  CrippleAction(10),
  DropsMoondrop(100, 3),
  WatermoonReputation(10)
) {
  constructor() {
    super({
      type: 'watermoon-mystic-zombie_guardian',
      displayName: 'Zombie Guardian',
      description: "The first thing you notice is the smell.  The second thing you notice is that there's nothing to really identify who or what this zombie was in its former life - the decomposition has gone on for far too long.  The last thing you notice before combat is truly joined is that whoever this zombie was, they must have been *powerful*, as this zombie attacks you with great force and precision.",
      isBoss: true,
      stats: {
        base: {
          maxHp: 75,
          force: 7,
          goldMin: 50,
          goldMax: 50
        },
        perLevel: {
          maxHp: 35,
          force: 2,
          goldMin: 20,
          goldMax: 25
        }
      },
    });
  }

  /**
   * Heal after every round.
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    const turns = this.getFlag(FLAG_FIGHT_TURNS, 0);
    if (turns < 5) {
      // Heal 10%
      messages.push(__("Mould and black ichor seal over the open wounds of the %s, healing %d damage.", this.getDisplayName(opponent), this.increaseHp(this.maxHp * 0.1)));
    }
    else if (turns < 10) {
      // Heal 5%
      messages.push(__("Mould grows slowly over the open wounds of the %s, healing %d damage.", this.getDisplayName(opponent), this.increaseHp(this.maxHp * 0.05)));
    }
    else if (turns < 15) {
      // Heal 2%
      messages.push(__("Black ichor drips into the open wounds of the %s, healing %d damage.", this.getDisplayName(opponent), this.increaseHp(this.maxHp * 0.02)));
    }
    else {
      // Heal 1%
      messages.push(__("Black ichor oozes around the open wounds of the %s, healing %d damage.", this.getDisplayName(opponent), this.increaseHp(this.maxHp * 0.01)));
    }

    this.setFlag(FLAG_FIGHT_TURNS, turns + 1);

    return messages;
  }

}

module.exports = ZobmieGuardianEnemy;