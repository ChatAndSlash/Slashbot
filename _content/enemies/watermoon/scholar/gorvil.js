"use strict";

const mix                         = require('mixwith').mix;
const { WatermoonBonusBossEnemy } = require('@app/content/enemies/watermoon/bonus_boss');
const { WatermoonReputation }     = require('@mixins/enemy/reputation/watermoon');
const { FuriousAction }           = require('@mixins/enemy/actions/furious');
const { PoisonAction }           = require('@mixins/enemy/actions/poison');
const { DropsMoondrop }           = require('@mixins/enemy/loot/moondrop');
const { shuffle }          = require('@util/random');
const { FLAGS }              = require('@constants');

const FLAG_IS_EXTRA_FURIOUS = 'is_extra_furious';
const FLAG_POISON_COOLDOWN = 'poison_cooldown';

class GorvilEnemy extends mix(WatermoonBonusBossEnemy).with(
  FuriousAction(0),
  PoisonAction(0, { strength: 100, text: ":syringe: %s scratches you with its claws, seemingly doing only superficial damage.  But within seconds, you start to feel the terrible burning of poison!" }),
  DropsMoondrop(100, 20),
  WatermoonReputation(150)
) {
  constructor() {
    super({
      type: 'watermoon-scholar-gorvil',
      displayName: "Gorvil",
      description: "Your mind... You've been in these depths so long that you can't tell if you're hallucinating or if this massive reptillian monster actually stands before you!  It plods slowly towards you, the impossible geometries of its face confounding you with every step.  You have to defeat this terrible creature before you go mad!",
    });

    this.districtBosses = [
      'watermoon-scholar-gorvil',
      'watermoon-scholar-maze_master',
      'watermoon-scholar-minotaur_king',
    ];

    this.bossFlag = FLAGS.SCHOLAR_BOSS;
  }

  /**
   * Get the HP display of this enemy.
   *
   * @param {Character} character - The character examining this enemy.
   *
   * @return {string}
   */
  getDisplayHp(character) {
    return "HP: ???";
  }

  /**
   * Randomize all action buttons
   *
   * @param {Character} character - The character to modify the action buttons for.
   * @param {Actions} actions - The action buttons to modify.
   *
   * @return {Actions}
   */
  modifyActions(character, actions) {
    actions.collection = shuffle(actions.collection);

    return actions;
  }

  /**
   * Randomize all skill buttons.
   *
   * @param {Character} character - The character to modify the skill action buttons for.
   * @param {Actions} actions - The skill action buttons to modify.
   *
   * @return {Actions}
   */
  modifySkillActions(character, actions) {
    actions.collection = shuffle(actions.collection);

    return actions;
  }

  /**
   * Display same furious warning for extra furious as regular furious.
   *
   * @param {Combatant} opponent - The current combatant's opponent.
   *
   * @return {array} Messages generated by these actions.
   */
  doPostRoundActions(opponent) {
    let messages = super.doPostRoundActions(opponent);

    if (this.hasFlag(FLAG_IS_EXTRA_FURIOUS)) {
      messages.push(`:rage: ${this.getDisplayName(opponent)} ${this.isAre} furious!`);
    }

    return messages;
  }

  /**
   * Return the fight actions of this enemy as a weighted array for Random.
   *
   * @param {Character} character - The character this enemy is fighting.
   *
   * @return {array}
   */
  getWeightedFightActions(character) {
    if (this.hasFlag(FLAG_IS_EXTRA_FURIOUS)) {
      return [
        { value: 'beExtraFurious', weight: 100 },
      ];
    }

    let actions = [
      { value: 'getFurious', weight: 20 },
      { value: 'getExtraFurious', weight: 20 },
    ];

    // Only inflict poison if poison attack is off cooldown, give antidoes a chance
    if ( ! this.hasFlag(FLAG_POISON_COOLDOWN)) {
      actions = actions.concat([
        { value: 'poisonAttack', weight: 30 },
        { value: 'doAttack', weight: 30 },
      ]);
    }
    else {
      actions = actions.concat([
        { value: 'doAttack', weight: 60 },
      ]);
    }

    return actions;
  }

  /**
   * Prepare a 2-turn windup for Furious.
   *
   * @param {Character} character - The character being attacked.
   *
   * @return {array}
   */
  getExtraFurious(character) {
    this.setFlag(FLAG_IS_EXTRA_FURIOUS);
    return [`${this.getDisplayName(character)} prepares to launch a furious attack!`];
  }

  /**
   * Second turn windup for extra furious.
   *
   * @param {Character} character - The character being attacked.
   *
   * @return {array}
   */
  beExtraFurious(character) {
    this.clearFlag(FLAG_IS_EXTRA_FURIOUS);
    this.setFlag(FLAGS.IS_FURIOUS);
    return [`${this.getDisplayName(character)} is extra furious!`];
  }

  /**
   * Clear all Scholar flags.
   *
   * @param {Character} character - The character who won the fight.
   * @param {array} messages - Any messages that have happened so far in combat.
   *
   * @return {array}
   */
  doFightSuccess(character, messages) {
    character.clearFlag(FLAGS.BOSS_DEFEATED_ + 'watermoon-scholar-minotaur');
    character.clearFlag(FLAGS.BOSS_DEFEATED_ + 'watermoon-scholar-gorgon');
    character.clearFlag(FLAGS.BOSS_DEFEATED_ + 'watermoon-scholar-empusa');
    character.clearFlag(FLAGS.HALLWAY_CHOICES);
    character.clearFlag(FLAGS.HALLWAY_REMAINING);
    character.clearFlag(FLAGS.HALLWAYS_COMPLETED);

    return super.doFightSuccess(character, messages);
  }

  /**
   * Do any extra actions required when running.
   *
   * @param {Character} character - The character doing the running.
   * @param {array} message - The previously-generated messages.
   *
   * @return {array}
   */
  doFightRun(character, messages) {
    messages = super.doFightRun(character, messages);

    this.leaveLabyrinth(character);
    messages.push(`The ${this.getDisplayName(character)} chases you right out of the Labyrinth!`);

    return messages;
  }

  /**
   * Special actions to take when this enemy has won.
   *
   * NOTE: Any additionally enqueued messages NEED a delay in order to ensure they show up after
   * the action fight message.
   *
   * @param {Character} character - The character who lost the fight.
   *
   * @return array
   */
  doFightFailure(character, messages) {
    messages = super.doFightFailure(character, messages);

    this.leaveLabyrinth(character);
    messages.push("As you pass into unconsciousness, you can feel your body being dragged out of the Labyrinth.");

    return messages;
  }
}

module.exports = GorvilEnemy;