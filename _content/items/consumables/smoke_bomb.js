"use strict";

const Consumable = require('@app/content/items/consumable').Consumable;
const Random     = require('@util/random');

const CHARACTER_STATE = require('@constants').CHARACTER_STATE;
const STATS           = require('@constants').STATS;

class SmokeBombConsumable extends Consumable {
  constructor() {
    super({
      type: 'consumables-smoke_bomb',
      displayName: __('Smoke Bomb'),
      description: __('A fist-sized black sphere with a self-lighting fuse.  Not dangerous, but certainly helpful for getting out of sticky situations!'),
      gold: 10,
    });
  }

  /**
   * If this consumable item can actually be used right now.
   *
   * @param Character character the character to check.
   *
   * @return boolean
   */
  canBeUsed(character) {
    return true;
  }

  /**
   * Consume the smelling salts, cancel the daze.
   *
   * @param Character character The character to remove poison from.
   *
   * @return string The message generated by consuming this item.
   */
  consume(character) {
    // Has to be required here to prevent circular dependencies
    const Combat = require('@app/combat');

    super.consume(character);

    let messages = [];
    const chance = character.enemy.isBoss ? 80 : 100;

    if (this.didRun(chance)) {
      character.state = CHARACTER_STATE.IDLE;
      character.increaseStat(STATS.FIGHTS_ESCAPED);

      messages = Combat.doFightEnd(character, messages);
      messages = Combat.doFightRun(character, messages);

      messages.push(__(":cloud:  You throw down a smoke bomb and take advantage of the resulting chaos to flee!"));
    }
    else {
      messages.push(__(":sun_small_cloud: You throw down a smoke bomb and make a break for it.  Unfortunately for you, your opponent's great eyesight sees right through it."));
    }

    return messages;
  }

  /**
   * If the character successfully ran away from their enemy.
   *
   * @param {integer} chance - The chance to run.
   *
   * @return {boolean}
   */
  didRun(chance) {
    return Random.between(1, 100) <= chance;
  }

  /**
   * Get a description of how this item will change the provided character's stats.
   *
   * @param Character character The character to evaluate against.
   *
   * @return string
   */
  getShopDescription(character) {
    return __('Guaranteed Run. (80% vs. Boss)');
  }
}

module.exports = SmokeBombConsumable;