"use strict";

const Consumable = require('@app/content/items/consumable').Consumable;

const PROFESSIONS = require('@constants').PROFESSIONS;

const POTION_RESTORE_HP = require('@constants').POTION_RESTORE_HP;

class PotionConsumable extends Consumable {
  constructor() {
    super({
      type: 'consumables-potion',
      displayName: __('Potion'),
      gold: 5,
    });
  }

  /**
   * If this consumable item can actually be used right now.
   *
   * @param {Character} character - the character to check.
   *
   * @return {boolean}
   */
  canBeUsed(character) {
    return character.hp < character.maxHp;
  }

  /**
   * Consume the potion, heal the character.
   *
   * @param {Character} character - The character to heal.
   *
   * @return {string} The message generated by consuming this item.
   */
  consume(character) {
    super.consume(character);

    const difference = character.increaseHp(this.getRestoreHp(character));

    return [__(':yum: You quaff a potion and heal *%d* HP.', difference)];
  }

  /**
   * Get the description for this item.
   *
   * @param {Character} character - The character examining this item.
   *
   * @return {string}
   */
  getDescription(character) {
    return __(
      'A bubbling red potion that will heal %d HP after a particularly grueling fight.',
      this.getRestoreHp(character)
    );
  }

  /**
   * Get the cost to purchase this item.
   *
   * @param {Character} character - The character looking to buy this item.
   *
   * @return {integer}
   */
  getCost(character) {
    return Math.ceil(super.getCost(character) * this.getEffectMultiplier(character));
  }

  /**
   * Get the amount of HP restored by an elixir for this character.
   *
   * @param {Character} character - The character restoring HP.
   *
   * @return {integer}
   */
  getRestoreHp(character) {
    return Math.ceil(POTION_RESTORE_HP * this.getEffectMultiplier(character));
  }

  /**
   * Get a description of how this item will change the provided character's stats.
   *
   * @param {Character} character - The character to evaluate against.
   *
   * @return {string}
   */
  getShopDescription(character) {
    return __('Recover +%d HP.', this.getRestoreHp(character));
  }

  /**
   * Certain achievements boost consumable effects.
   *
   * @param {Character} character - The character to check.
   *
   * @return {number}
   */
  getEffectMultiplier(character) {
    let multiplier = 1;

    if (character.hasMasteredProfession(PROFESSIONS.NOVICE)) {
      const Professions = require('@app/content/professions').Professions;
      const noviceProfession = Professions.new(PROFESSIONS.NOVICE);
      multiplier += noviceProfession.getMasteryBonus(character);
    }

    return multiplier;
  }
}

module.exports = PotionConsumable;