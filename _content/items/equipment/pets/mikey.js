"use strict";

const { mix }                = require('mixwith');
const { between, fromArray } = require('@util/random');
const { getArticle }         = require('@util/text');
const { Items }              = require('@app/content/items');
const Pet                    = require('@app/content/items/equipment/pets');
const { ScaleCost }          = require('@mixins/item/scale_cost');

const { FLAGS } = require('@constants');

const ITEM_ANTIDOTE = 'consumables-antidote';
const ITEM_BLESSING = 'consumables-blessing';
const ITEM_COLD_COMPRESS = 'consumables-cold_compress';
const ITEM_HOT_CHOCOLATE = 'consumables-hot_chocolate';
const ITEM_SMELLING_SALTS = 'consumables-smelling_salts';

class Mikey extends mix(Pet).with(ScaleCost(75)) {
  constructor() {
    super({
      type: 'equipment-pets-mikey',
      displayName: __('Mikey'),
      shopText: __('A handy helper monkey that has a 50% chance per turn of using a status-curing item on you.'),
      description: __('Mikey is dressed in little red overalls and carries a little banana-shaped lunchbox.'),
    });
  }

  /**
   * 50% chance to use an item to cure character of status effect.
   *
   * @param {Character} character - The character in combat.
   *
   * @return {array} The messages generated by these actions.
   */
  doPostRoundActions(character) {
    let messages = [];

    if (this.isActiveThisTurn()) {
      const useableItems = this.getUsableItems(character);

      if (useableItems.length) {
        const item = Items.new(fromArray(useableItems));
        const itemName = item.getDisplayName(character);

        messages.push(`:monkey: Mikey rummages in your inventory, grabs ${getArticle(itemName)} ${itemName} and slaps it against you.  Surprisingly, it works!`);
        messages = messages.concat(item.consume(character));
      }
    }

    return messages;
  }

  /**
   * 50% chance to be active this turn.
   *
   * @return {boolean}
   */
  isActiveThisTurn() {
    return between(1, 2) > 1;
  }

  /**
   * Get all items that can be used on a character.
   *
   * @param {Character} character - The character to check.
   *
   * @return {array}
   */
  getUsableItems(character) {
    let useableItems = [];

    if (this.canPoisonBeCured(character)) {
      useableItems.push(ITEM_ANTIDOTE);
    }

    if (this.canCurseBeCured(character)) {
      useableItems.push(ITEM_BLESSING);
    }

    if (this.canBurnBeCured(character)) {
      useableItems.push(ITEM_COLD_COMPRESS);
    }

    if (this.canChillBeCured(character)) {
      useableItems.push(ITEM_HOT_CHOCOLATE);
    }

    if (this.canDazeBeCured(character)) {
      useableItems.push(ITEM_SMELLING_SALTS);
    }

    return useableItems;
  }

  /**
   * If a character is poisoned and has antidotes.
   *
   * @param {Character} character - The character to check.
   *
   * @return {boolean}
   */
  canPoisonBeCured(character) {
    return character.hasFlag(FLAGS.POISONED_TURNS)
      && character.inventory.has(ITEM_ANTIDOTE);
  }

  /**
   * If a character is cursed and has blessings.
   *
   * @param {Character} character - The character to check.
   *
   * @return {boolean}
   */
  canCurseBeCured(character) {
    return character.hasFlag(FLAGS.CURSED_TURNS)
      && character.inventory.has(ITEM_BLESSING);
  }

  /**
   * If a character is burned and has cold compresses.
   *
   * @param {Character} character - The character to check.
   *
   * @return {boolean}
   */
  canBurnBeCured(character) {
    return character.hasFlag(FLAGS.BURNED_TURNS)
      && character.inventory.has(ITEM_COLD_COMPRESS);
  }

  /**
   * If a character is chilled and has hot chocolates.
   *
   * @param {Character} character - The character to check.
   *
   * @return {boolean}
   */
  canChillBeCured(character) {
    return character.hasFlag(FLAGS.CHILLED_TURNS)
      && character.inventory.has(ITEM_HOT_CHOCOLATE);
  }

  /**
   * If a character is dazed and has smelling salts.
   *
   * @param {Character} character - The character to check.
   *
   * @return {boolean}
   */
  canDazeBeCured(character) {
    return character.hasFlag(FLAGS.DAZED_TURNS)
      && character.inventory.has(ITEM_SMELLING_SALTS);
  }
}

module.exports = Mikey;