"use strict";

const Profession = require('@app/content/professions').Profession;
const Text       = require('@util/text');
const Random     = require('@util/random');

const PROFESSIONS = require('@constants').PROFESSIONS;
const FLAGS       = require('@constants').FLAGS;

const MASTERY_SPELLPOWER_BONUS = 10;

const SKILL_INSPIRE           = 'inspire';
const STAMINA_INSPIRE         = 1;
const TURNS_INSPIRED          = 1;
const INSPIRE_MP              = 50;
const COOLDOWN_FIGHTS_INSPIRE = 1;

const SKILL_FOCUS   = 'focus';
const STAMINA_FOCUS = 1;
const SP_FOCUS      = 15;
const REQ_SP_FOCUS  = 30;

const SKILL_CANTRIP     = 'cantrip';
const STAMINA_CANTRIP   = 3;
const SP_CANTRIP        = 30;
const REQ_SP_CANTRIP    = 110;
const TURNS_DISORIENTED = 3;

const SKILL_MORE_LUTE   = 'more_lute';
const STAMINA_MORE_LUTE = 5;
const SP_MORE_LUTE      = 60;
const REQ_SP_MORE_LUTE  = 180;

class Bard extends Profession {
  constructor() {
    super({
      type: PROFESSIONS.BARD,
      displayName: 'Bard',
      description: __('The conjuring tricks they learn are flashy, but often useful in a fight as well.'),
      details: __("Bards travel the land, singing for their supper as well as collecting small spells that might be useful in their performances.  In fact, many a powerful warmage began their careers as a simple Bard who got more interested in magic than performance."),
      adText: __("*Offence:* (25% Force) + (75% Technique)"),
      image: 'professions/bard.png',
      changeCost: 100,
      maxSp: 375,
      masteryDescription: __("You gain a permanent +%d Spell Power bonus and access to Focus as a Support Skill.", MASTERY_SPELLPOWER_BONUS),
      masteryImprovementDescription: "Gain a permanent %d Spell Power bonus (%d bonus total).",
      spMastery: 90,
      reqSpMastery: 285,
      supportSkill: SKILL_FOCUS,
    });
  }

  /**
   * Get the description for what happens when you improve your mastery.
   *
   * @param {Character} character - The character to get the description for.
   *
   * @return {string}
   */
  getMasteryImprovementDescription(character) {
    const nextLevel = this.getMasteryLevel(character) + 1;
    return __(
      this._masteryImprovementDescription,
      this.getNextMasteryIncrement(character),
      this.getMasteryBonus(character, nextLevel)
    );
  }

  /**
   * Get the current mastery bonus for this character.
   *
   * @param {Character} character - The character to get the mastery bonus for.
   *
   * @return {mixed}
   */
  getMasteryBonus(character, level = this.getMasteryLevel(character)) {
    return level * MASTERY_SPELLPOWER_BONUS;
  }

  /**
   * Get the next mastery bonus for this character.
   *
   * @param {Character} character - The character to get the next mastery bonus for.
   *
   * @return {mixed}
   */
  getNextMasteryIncrement(character) {
    return MASTERY_SPELLPOWER_BONUS;
  }

  /**
   * Get the offence stat for Bards.
   *
   * 0.25 Force + 0.75 Technique
   *
   * @param {Character} character - The character to get the offence stat for.
   *
   * @return {integer}
   */
  getOffence(character) {
    return Math.ceil(character.force * 0.25 + character.technique * 0.75);
  }

  /**
   * Add Spell Power bonus.
   *
   * @param {Character} character - The character mastering this profession.
   */
  async performMasteryActions(character) {
    await super.performMasteryActions(character);

    character._spellPower += MASTERY_SPELLPOWER_BONUS;
  }

  /**
   * Add spellPower bonus AGAIN.
   *
   * @param {Character} character - The character improving their mastery.
   */
  async performImproveMasteryActions(character) {
    await super.performImproveMasteryActions(character);

    character._spellPower += MASTERY_SPELLPOWER_BONUS;
  }

  /**
   * Do any actions that might happen after each round of combat (regen, etc.)
   *
   * @param {Character} character - The character in combat.
   *
   * @return {array} The messages generated by these actions.
   */
  doPostRoundActions(character) {
    const enemy = character.enemy;

    let messages = super.doPostRoundActions(character);

    if (enemy.hp > 0) {
      if (enemy.hasFlag(FLAGS.DISORIENTED_TURNS)) {
        const turns = enemy.getFlag(FLAGS.DISORIENTED_TURNS) - 1;
        if (turns > 0) {
          messages.push(__("%s %s still disoriented and has a high chance to miss you for %d more %s.", enemy.getDisplayName(character), enemy.isAre, turns, Text.pluralize("turn", turns)));
        }
      }
    }

    return messages;
  }

  /**
   * Check to see if a character can perform a specific combat skill.
   *
   * @param {Character} character - The character performing the skill.
   * @param {string} skill - The skill to perform.
   *
   * @return {array} Messages arising from the skill.
   */
  canDoSkill(character, skill) {
    if (SKILL_INSPIRE === skill && character.hasFlag(FLAGS.FIGHT_COOLDOWN_INSPIRE)) {
      return false;
    }
    else if (SKILL_MORE_LUTE === skill && character.hasFlag(FLAGS.FIGHT_COOLDOWN_MORE_LUTE)) {
      return false;
    }

    return super.canDoSkill(character, skill);
  }

  /**
   * Get the error message for why you can't use this skill.
   *
   * @param {Character} character - The character performing the skill.
   * @param {string} skill - The skill to perform.
   *
   * @return {string}
   */
  getSkillErrorMessage(character, skill) {
    if (SKILL_INSPIRE === skill && character.hasFlag(FLAGS.FIGHT_COOLDOWN_INSPIRE)) {
      return __(":warning: You can only use Inspire once per fight.");
    }
    else if (SKILL_MORE_LUTE === skill && character.hasFlag(FLAGS.FIGHT_COOLDOWN_MORE_LUTE)) {
      return __(":warning: You can only use More Lute! once per fight.");
    }

    return super.getSkillErrorMessage(character, skill);
  }

  /**
   * Get the stats available for purchase for this character/profession.
   *
   * @return {array}
   */
  getStats() {
    return {
      maxMp: {
        increase: 10,
        costs: [ 10, 10, 10, 10, 10, 10, 10, 10, 10, 10 ]
      },
      technique: {
        increase: 1,
        costs: [ 10, 10, 15, 20, 25 ]
      },
    };
  }

  /**
   * Get the skills the provided character has access to from this profession.
   *
   * NB: Can't call canDoSkill in here, as it will recurse indefinitely.
   *
   * @param {Character} character - The character getting the skills of this profession.
   * @param {boolean} addSupport - Add selected Support Skill.
   *
   * @return {object}
   */
  getSkills(character, addSupport = true) {
    let skills = {
      [SKILL_INSPIRE]: {
        name: __("Inspire"),
        description: __("Psyche yourself up against a Tired enemy, gaining %d MP, and ensuring your next attack hits.", INSPIRE_MP),
        cost: STAMINA_INSPIRE,
        properties: [],
      },
      [SKILL_FOCUS]: {
        name: __("Focus"),
        description: __("Your next damaging spell does 2x damage for 1.5x the mana cost."),
        cost: STAMINA_FOCUS,
        spCost: SP_FOCUS,
        reqSp: REQ_SP_FOCUS,
        properties: [],
      },
      [SKILL_CANTRIP]: {
        name: __("Cantrip"),
        description: __("Disorient your enemy, gaining 25% dodge for 3 turns."),
        cost: STAMINA_CANTRIP,
        spCost: SP_CANTRIP,
        reqSp: REQ_SP_CANTRIP,
        properties: [],
      },
      [SKILL_MORE_LUTE]: {
        name: __("More Lute!"),
        description: __("Once per fight, brain your opponent with your instrument, stunning them for a turn and giving you a chance to rifle their pockets for loose change."),
        cost: STAMINA_MORE_LUTE,
        spCost: SP_MORE_LUTE,
        reqSp: REQ_SP_MORE_LUTE,
        properties: [],
      }
    };

    if (addSupport) {
      skills = this.addSupportSkill(character, skills);
    }

    return skills;
  }

  /**
   * Perform a specific combat skill.
   *
   * @param {Character} character - The character performing the skill.
   * @param {string} type - The type of the skill to perform.
   *
   * @return {array} Messages arising from the skill.
   */
  doSkill(character, type) {
    if (SKILL_INSPIRE === type) {
      return this.doSkillInspire(character);
    }
    // Focus is a Support Skill
    else if (SKILL_CANTRIP === type) {
      return this.doSkillCantrip(character);
    }
    else if (SKILL_MORE_LUTE === type) {
      return this.doSkillMoreLute(character);
    }

    return super.doSkill(character, type);
  }

  /**
   * Psyche yourself up against a Tired enemy, gaining +INSPIRE_MP and guaranteeing your next attack
   * will hit.
   *
   * @param {Character} character - The character performing the fierce attack.
   *
   * @return {array} Messages arising from this skill.
   */
  doSkillInspire(character) {
    let messages = [];
    let enemy    = character.enemy;

    character.stamina -= STAMINA_INSPIRE;

    if (enemy.isTired()) {
      character.setFlag(FLAGS.FIGHT_COOLDOWN_INSPIRE, COOLDOWN_FIGHTS_INSPIRE);
      character.setFlag(FLAGS.GUARANTEED_HIT_TURNS, TURNS_INSPIRED + 1);
      const mp = character.increaseMp(INSPIRE_MP);
      messages.push(__(":small_blue_diamond: You take inspiration from how tired your enemy is, and gain %d MP.  You're so inspired that your next attack is guaranteed to hit!", mp));
    }
    else {
      messages.push(__(":cry: You try to psyche yourself up, but your awake and aware opponent just laughs at you.  You feel kinda bad, but it doesn't hurt... On the outside, anyway."));
    }

    return messages;
  }

  /**
   * Disorient your opponent with an illusion, gaining 50% dodge for 3 turns.
   *
   * @param {Character} character - The character performing this skill.
   *
   * @return {array} Message arising from this skill.
   */
  doSkillCantrip(character) {
    character.stamina -= STAMINA_CANTRIP;
    const enemy = character.enemy;
    enemy.setFlag(FLAGS.DISORIENTED_TURNS, TURNS_DISORIENTED + 1);
    return [__(":dizzy_face: You cast a dizzying illusion, disorienting %s for %d turns and granting you 50%% dodge.", enemy.getDisplayName(character), TURNS_DISORIENTED)];
  }

  /**
   * Misdirect your enemy with an illusion, guaranteeing a critical hit.
   *
   * @param {Character} character - The character performing this skill.
   *
   * @preturn {array} Messages arising from this skill.
   */
  doSkillMoreLute(character) {
    const enemy = character.enemy;

    character.setFlag(FLAGS.FIGHT_COOLDOWN_MORE_LUTE, 1);
    character.stamina -= STAMINA_MORE_LUTE;

    // 50% chance of 10% bonus gold
    const turns = Random.between(1, 2);
    enemy.setFlag(FLAGS.STUNNED_TURNS, turns);

    let messages = [__(":guitar: You slam your instrument over %s's head, knocking them unconscious for %d turns.  ", enemy.getDisplayName(character), turns)];

    // Knocked out for 2 turns?  You have time to loot
    if (turns === 2) {
      const gold = Math.ceil(Random.between(enemy.goldMin, enemy.goldMax) / 10);
      character.gold += gold;
      messages.push(__(":moneybag: While they're unconscious, you find %d gold hidden... well, you don't want to know where.", gold));
    }
    // Only knocked out for 1 turn?  No dice!
    else {
      messages.push(__(":innocent: You rifle through their pockets, but they wake up before you finish.  You jump back and try to act nonchalant."));
    }

    return messages;
  }
}

module.exports = Bard;