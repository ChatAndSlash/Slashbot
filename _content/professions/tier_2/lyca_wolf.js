"use strict";

const Combat            = require('@app/combat');
const LycaTransformBase = require('@content/professions/tier_2/lyca_transform_base');

const {
  PROFESSIONS,
  PROPERTIES,
} = require('@constants');

const SKILL_FESTERING_BITE      = 'festering_bite';
const STAMINA_FESTERING_BITE    = 1;
const FLAG_FESTERING_BITE       = 'festering_bite';
const FESTERING_BITE_TURNS      = 3;
const FESTERING_BITE_MULTIPLIER = 2;

const SKILL_SLASH       = 'slash';
const STAMINA_SLASH     = 3;
const FLAG_SLASH_BLEED  = 'slash_bleed';
const SLASH_BLEED_TURNS = 2;

const SKILL_VICIOUS_CHOMP   = 'vicious_chomp';
const STAMINA_VICIOUS_CHOMP = 3;
const FLAG_VICIOUS_CHOMP    = 'vicious_chomp';

/**
 * Plural is "Lycae".
 */
class Lywolf extends LycaTransformBase {
  constructor() {
    super({
      type: PROFESSIONS.LYCA,
      displayName: "Lywolf",
      description: "",
      details: "",
      image: 'professions/lyca.png',
    });
  }

  /**
   * Get the offence stat for Lycae.
   *
   * When not transformed:
   * 0.4 Force + 0.4 Technique = 0.8
   *
   * When transformed:
   * - Wolf: 0.6 Force + 0.6 Technique = 1.2
   * - Bear: 1.2 Force = 1.2
   * - Lion: 1.2 Technique = 1.2
   * - Dragon: 0.6 Force + 0.6 Technique
   *
   * @param {Character} character - The character to get the offence stat for.
   *
   * @return {integer}
   */
  getOffence(character) {
    return Math.ceil(character.force * 0.6 + character.technique * 0.6);
  }

  /**
   * Do any actions that might happen after each round of combat (regen, etc.)
   *
   * @param {Character} character - The character in combat.
   *
   * @return {array} The messages generated by these actions.
   */
  doPostRoundActions(character) {
    let enemy = character.enemy;
    let messages = super.doPostRoundActions(character);

    // Enemy festering?
    if (enemy.hasFlag(FLAG_FESTERING_BITE)) {
      const turns = enemy.getFlag(FLAG_FESTERING_BITE) - 1;
      const attackInfo = character.getEffectAttackInfo(enemy);
      const attackText = attackInfo.damage > 0 ? `*${attackInfo.damage}*` : 'no';
      const festerText = turns > 0 ? `  It will fester for ${turns} more turns.` : '';
      messages.push(`:grimacing: ${enemy.getDisplayName(character)}'s wound festers, inflicting ${attackText} damage.${festerText}`);
      enemy.decreaseHp(attackInfo.damage);
      enemy.decrementFlag(FLAG_FESTERING_BITE);
    }

    // Enemy bleeding?
    if (enemy.hasFlag(FLAG_SLASH_BLEED)) {
      const turns = enemy.getFlag(FLAG_SLASH_BLEED) - 1;
      const attackInfo = character.getEffectAttackInfo(enemy);
      const attackText = attackInfo.damage > 0 ? `*${attackInfo.damage}*` : 'no';
      const festerText = turns > 0 ? `  It will bleed for ${turns} more turns.` : '';
      messages.push(`:grimacing: ${enemy.getDisplayName(character)} bleeds, taking ${attackText} damage.${festerText}`);
      enemy.decreaseHp(attackInfo.damage);
      enemy.decrementFlag(FLAG_SLASH_BLEED);
    }

    return messages;
  }

  /**
   * Vicious Chomp adds 50% crit
   *
   * @param {object} params - The parameters to modify.
   * @param {Combatant} defender - The defender of the attack.
   * @param {Character} character - The attacking character.
   *
   * @return {object}
   */
  attackerModifyAttackParameters(params, defender, character) {
    if (character.hasFlag(FLAG_VICIOUS_CHOMP)) {
      params.crit = Math.min(params.crit + 50, 100);
      params.paramExtraMessages.push("Your Vicious Chomp granted you 50% crit chance!");
      character.clearFlag(FLAG_VICIOUS_CHOMP);
    }

    return super.attackerModifyAttackParameters(params, defender, character);
  }

  /**
   * Get the skills the provided character has access to from this profession.
   *
   * NB: Can't call canDoSkill in here, as it will recurse indefinitely.
   *
   * @param {Character} character - The character getting the skills of this profession.
   * @param {boolean} addSupport - Add selected Support Skill.
   *
   * @return {object}
   */
  getSkills(character, addSupport = true) {
    let skills = {
      [SKILL_FESTERING_BITE]: {
        name: "Festering Bite",
        description: "Does double damage and inflicts a heavy festering wound to Tired enemies.",
        cost: STAMINA_FESTERING_BITE,
        properties: [
          PROPERTIES.IS_ATTACK,
        ],
      },
      [SKILL_SLASH]: {
        name: "Slash",
        description: "Deal damage and inflict a bleeding wound.",
        cost: STAMINA_SLASH,
        properties: [
          PROPERTIES.IS_ATTACK,
        ],
      },
      [SKILL_VICIOUS_CHOMP]: {
        name: "Vicious Chomp",
        description: "Deal some extra damage with a bonus chance of a critical attack.",
        cost: STAMINA_VICIOUS_CHOMP,
        properties: [
          PROPERTIES.IS_ATTACK,
        ],
      },
    };

    if (addSupport) {
      skills = this.addSupportSkill(character, skills);
    }

    return skills;
  }

  /**
   * Lycae forms can always use their skills.
   *
   * @param {array} dbRow - The database row to extract the trained skills from.
   * @param {string} type - The type of profession being loaded.
   * @param {Character} character - The character loading the skills.
   *
   * @return {array}
   */
  getTrained(dbRow, type, character) {
    return {
      [SKILL_FESTERING_BITE]: true,
      [SKILL_SLASH]: true,
      [SKILL_VICIOUS_CHOMP]: true,
    };
  }

  /**
   * Perform a specific combat skill.
   *
   * @param {Character} character - The character performing the skill.
   * @param {string} type - The type of the skill to perform.
   *
   * @return {array} Messages arising from the skill.
   */
  doSkill(character, type) {
    if (SKILL_FESTERING_BITE === type) {
      return this.doSkillFesteringBite(character);
    }
    else if (SKILL_SLASH === type) {
      return this.doSkillSlash(character);
    }
    else if (SKILL_VICIOUS_CHOMP === type) {
      return this.doSkillViciousChomp(character);
    }

    return super.doSkill(character, type);
  }

  /**
   * Bite for 2x damage and leave a festering wound DoT for 3x damage.  Tired only.
   *
   * @param {Character} character - The character doing the biting.
   *
   * @return {array}
   */
  doSkillFesteringBite(character) {
    const enemy = character.enemy;
    let messages = [];

    character.stamina -= STAMINA_FESTERING_BITE;

    if (enemy.isTired()) {
      enemy.setFlag(FLAG_FESTERING_BITE, FESTERING_BITE_TURNS);
      messages = messages.concat(Combat.doAttack(character, {
        message: ":grimacing: Your opponent is tired, and you bite savagely, dealing %s damage to %s and leaving them with a festering wound!%s",
        multiplier: FESTERING_BITE_MULTIPLIER,
      }));
    }
    else {
      messages.push(`${enemy.getDisplayName(character)} isn't tired, and easily dodges your attempt to bite them.`);
    }

    return messages;
  }

  /**
   * Slash for 1x damage and leave a bleeding wound DoT for 2x damage.
   *
   * @param {Character} character - The character doing the biting.
   *
   * @return {array}
   */
  doSkillSlash(character) {
    character.stamina -= STAMINA_SLASH;
    character.enemy.setFlag(FLAG_SLASH_BLEED, SLASH_BLEED_TURNS);

    return Combat.doAttack(character, {
      message: ":grimacing: You slash wildly, dealing %s damage to %s and leaving them with a bleeding wound!%s",
    });
  }

  /**
   * Chomp for 1.5x damage w/ a 25% crit bonus.
   *
   * @param {Character} character - The character doing the biting.
   *
   * @return {array}
   */
  doSkillViciousChomp(character) {
    character.stamina -= STAMINA_VICIOUS_CHOMP;
    character.setFlag(FLAG_VICIOUS_CHOMP);

    return Combat.doAttack(character, {
      message: ":grimacing: You viciously chomp at your opponent, dealing %s damage to %s!%s",
    });
  }
}

module.exports = Lywolf;