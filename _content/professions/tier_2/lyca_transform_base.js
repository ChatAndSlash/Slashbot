"use strict";

const { Profession } = require('@app/content/professions');

const { FLAGS } = require('@constants');

/**
 * Plural is "Lycae".
 */
class LycaTransformBase extends Profession {
  /**
   * Don't actually presist this profession to the DB.
   *
   * @param {string} character_id - The ID of the character to save the profession of.
   * @param {PromiseConnection} connection - The database connection to use.
   */
  async save(character_id, connection) {
    return;
  }

  /**
   * After every fight, clear any transformation in play before SP can be applied.
   *
   * @param {Character} character - The character involved in the fight.
   * @param {array} messages - The messages already generated in this fight.
   *
   * @return {array}
   */
  doFightWrapUp(character, messages) {
    this.revertFromForm(character);

    return super.doFightWrapUp(character, messages);
  }

  /**
   * Do any actions that might happen after each round of combat (regen, etc.)
   *
   * @param {Character} character - The character in combat.
   *
   * @return {array} The messages generated by these actions.
   */
  doPostRoundActions(character) {
    let messages = super.doPostRoundActions(character);

    // No stamina?  No more transformed form!
    if (character.stamina === 0) {
      this.revertFromForm(character);
      messages.push("Drained of stamina, you fall to the ground, you shifted form fading from you.");
    }

    return messages;
  }

  /**
   * Change Attack to Growl and Defend to Cower.
   *
   * @param {Character} character - The character to modify the action buttons for.
   * @param {Actions} actions - The action buttons to modify.
   *
   * @return {Actions}
   */
  modifyActions(character, actions) {
    actions.collection = actions.collection.map(action => {
      if (action.name === 'attack_1') {
        return {
          name: 'growl_2',
          text: 'Growl [+2]',
          value: 'fight_action|{"action":"attack"}',
          type: 'button',
          style: 'primary'
        };
      }
      else if (action.name === 'defend_3') {
        return {
          name: 'cower',
          text: 'Cower [0]',
          value: 'fight_action|{"action":"defend"}',
          type: 'button',
          style: 'primary'
        };
      }

      return action;
    });

    return actions;
  }

  /**
   * Don't attack, just growl and get more stamina.
   *
   * @param {Character} character - The character performing the attack.
   *
   * @return {array} The messages generated.
   */
  doAttack(character) {
    character.stamina += 2;
    return ["You growl, recovering more of your stamina."];
  }

  /**
   * Cower, defending, but losing your shifted form.
   *
   * @param {Character} character - The character defending.
   *
   * @return {array} The messages generated.
   */
  doDefend(character) {
    let messages = [];

    character.setFlag(FLAGS.IS_DEFENDING);
    this.revertFromForm(character);
    character.stamina = 0;

    messages.push(":scream: You cower in fear, defending for a turn, but losing your shifted form.");
    messages = messages.concat(character.weapon.doDefend(character));

    return messages;
  }
}

module.exports = LycaTransformBase;